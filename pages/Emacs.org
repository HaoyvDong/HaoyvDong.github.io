#+PROPERTY: header-args:emacs-lisp :results silent :tangle "~/.emacs.d/init.el"

* References
- https://github.com/willbchang/ward-emacs
- https://github.com/pprevos/emacs-writing-studio/
- https://github.com/condy0919/emacs-newbie
- https://github.com/jamescherti/minimal-emacs.d
- https://github.com/MatthewZMD/.emacs.d
- [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide][陈斌：一年成为Emacs高手]]
- [[https://book.emacs-china.org/][子龙山人：21 天学会 Emacs]]
- [[https://pavinberg.github.io/emacs-book/zh/][专业 Emacs 入门]]

* early-init
#+begin_src  emacs-lisp :tangle "~/.emacs.d/early-init.el"
  ;;; early-init.el --- Early initialization. -*- lexical-binding: t -*-

  ;; Faster to disable these here (before they've been initialized)
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  (push '(fullscreen . maximized) default-frame-alist)
  ;; Prevent Emacs from initializing packages before loading user-init-file
  (setq package-enable-at-startup nil)
  ;; (setq-default mode-line-format nil)
  (provide 'early-init)

  ;;; early-init.el ends here

#+end_src
* Init.el
** Lexical Binding
In order to enable lexical binding in the config, this must be the first line of Emacs Lisp.
#+begin_src emacs-lisp
  ;;; init.el -*- lexical-binding: t -*-
#+end_src
** Custom
#+begin_src emacs-lisp
  ;; Custom settings in a separate file and load the custom settings

  (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))

  (when (file-exists-p custom-file)
    (load custom-file))

#+end_src
** Package Manager
#+begin_src emacs-lisp
  (use-package package
    :custom
    (package-archives
     '(("gnu" . "https://mirrors.ustc.edu.cn/elpa/gnu/")
       ("melpa" . "https://mirrors.ustc.edu.cn/elpa/melpa/")
       ("nongnu" . "https://mirrors.ustc.edu.cn/elpa/nongnu/")))
    :config
    (package-initialize))
  (use-package use-package
    :custom
    (use-package-always-ensure t)
    ;; (use-package-always-defer t)
    (warning-minimum-level :emergency))
#+end_src
** Localization
*** Platform
#+begin_quote
home 目录，简单的用 ~~~ 表示，或者用全路径表示为 ~/home/xxx/~ ，其中 xxx 表示用户名字，所以，在 Linux 下将 .emacs 和 .emacs.d 放到这个目录下就行了，但 windows 没有 home 目录的概念，所以，Emacs 就按如下方式来查找配置文件：

    1. 如果设置了 ~HOME~ 环境变量，那么就用它的值作为home目录
    2. 如果存在注册表键值 ~HKCU\SOFTWARE\GNU\Emacs\HOME~ ，就用它的值作为home目录
    3. 如果存在注册表键值 ~HKLM\SOFTWARE\GNU\Emacs\HOME~ ，就用它的值作为home目录（和2的区别是，2只是针对当前用户的注册表路径，3则是针对所有用户）
    4. 如果存在 ~C:\.emacs~ ，就用 ~C:\~ 作为home目录
    5. 如果以上都不存在的话，就使用 ~\Users<user name>\AppData\Roaming~ 作为home目录~（对于XP和较早windows用户，需要到 ~Documents and Settings~ 目录下去找）

来源： https://emacs-china.org/t/windows-spacemacs-home/13435/3?u=randir
#+end_quote
*** Coding
- https://github.com/purcell/emacs.d/blob/7a725b2e20155b1686830430e56104c449f4ecec/lisp/init-locales.el#L18-L23
#+begin_src emacs-lisp
  (when (fboundp 'set-charset-priority)
    (set-charset-priority 'unicode))
  (prefer-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)
  (unless (eq system-type 'windows-nt)
    (set-selection-coding-system 'utf-8))
  (when (eq system-type 'windows-nt)
    (setq file-name-coding-system 'chinese-gb18030))
  (setq system-time-locale "C")
  ;;(format-time-string "%Y-%m-%d")
#+end_src
*** CNFonts Cal-China-X
#+begin_src emacs-lisp
  (use-package cnfonts)
  (use-package cal-china-x
    :after cnfonts
    :custom
    (calendar-mark-holidays-flag t)
    (cal-china-x-force-chinese-week-day t)
    (cal-china-x-always-show-jieqi t))
#+end_src
** UI
#+begin_src emacs-lisp
  (column-number-mode t)
  (use-package display-line-numbers
    :hook (after-init . global-display-line-numbers-mode)
    :custom (display-line-numbers-type 'visual))
  (use-package hl-line
    :hook (after-init . global-hl-line-mode)
    :config
    (setq hl-line-sticky-flag nil)
    ;; Highlight starts from EOL, to avoid conflicts with other overlays
    (setq hl-line-range-function (lambda () (cons (line-end-position)
  						(line-beginning-position 2)))))
  ;; (keymap-global-set "<f10>" #'tmm-menubar)
  (advice-add #'tmm-add-prompt :after #'minibuffer-hide-completions)
  ;; Window management
  ;; Split windows sensibly

  (setq split-width-threshold 120
        split-height-threshold nil)

#+end_src
*** Themes
#+begin_src emacs-lisp
  (use-package modus-themes
    :pin melpa
    :bind
    (:map global-map
  	("<f5>" . modus-themes-toggle)))
  (use-package auto-dark
    :custom
    (auto-dark-themes '((modus-vivendi-deuteranopia) (modus-operandi-deuteranopia)))
    :init (auto-dark-mode))
#+end_src
** UX
*** Completion & Prompt
vertico orderless marginalia which-key
#+begin_src emacs-lisp
  (use-package vertico
    :hook after-init
    (vertico-mode . vertico-multiform-mode)
    :custom
    (vertico-multiform-commands '((tmm-menubar flat))))
  (use-package savehist
    :hook vertico-mode)
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
  (use-package marginalia
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :hook vertico-mode)
  (use-package which-key
    :hook after-init)
#+end_src
*** File Manager
**** Dirvish
[[https://github.com/alexluigit/dirvish][dirvish: A polished Dired with batteries included.]]
#+begin_src emacs-lisp
  ;; Try to replace the treemacs as my scenario is quite simple.
  (use-package dirvish
    :init
    (dirvish-override-dired-mode)
    :custom
    (dirvish-quick-access-entries ; It's a custom option, `setq' won't work
     '(("h" "~/"                          "Home")))
    :config
    ;; (dirvish-peek-mode) ; Preview files in minibuffer
    (dirvish-side-follow-mode) ; similar to `treemacs-follow-mode'
    (setq dirvish-mode-line-format
  	'(:left (sort symlink) :right (omit yank index)))
    (setq dirvish-attributes
  	'(file-time file-size collapse subtree-state vc-state))
    (setq delete-by-moving-to-trash t)
    (setq dired-listing-switches
  	"-l --almost-all --human-readable --group-directories-first --no-group")
    :bind ; Bind `dirvish|dirvish-side|dirvish-dwim' as you see fit
    (("M-0" . dirvish-side)
     :map dirvish-mode-map ; Dirvish inherits `dired-mode-map'
     ("a"   . dirvish-quick-access)
     ("f"   . dirvish-file-info-menu)
     ("y"   . dirvish-yank-menu)
     ("N"   . dirvish-narrow)
     ("^"   . dirvish-history-last)
     ("h"   . dirvish-history-jump) ; remapped `describe-mode'
     ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
     ("v"   . dirvish-vc-menu)      ; remapped `dired-view-file'
     ("TAB" . dirvish-subtree-toggle)
     ("M-f" . dirvish-history-go-forward)
     ("M-b" . dirvish-history-go-backward)
     ("M-l" . dirvish-ls-switches-menu)
     ("M-m" . dirvish-mark-menu)
     ("M-t" . dirvish-layout-toggle)
     ("M-s" . dirvish-setup-menu)
     ("M-e" . dirvish-emerge-menu)
     ("M-j" . dirvish-fd-jump)
     ("M-u" . dired-up-directory)))
#+end_src
** Window Management
*** Initial Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :init
    (dashboard-setup-startup-hook)
    :custom
    (initial-buffer-choice '(lambda () (get-buffer-create dashboard-buffer-name)))
    (dashboard-startup-banner 2)
    (dashboard-center-content t))
#+end_src
*** Session
[[https://github.com/iqbalansari/restart-emacs][restart-emacs]] offers a command ~restart-emacs~.
#+begin_src emacs-lisp
  (use-package restart-emacs)
  (server-start)
#+end_src
*** Buffer
#+begin_src emacs-lisp
  (use-package saveplace
    :ensure nil
    :hook (after-init . save-place-mode))
#+end_src
*** Window Tab Line
#+begin_src emacs-lisp
  (use-package tab-line
    :config (global-tab-line-mode t)
    :hook after-init)
#+end_src
** Word Processing

*** Basic Text-Mode
#+begin_src emacs-lisp
  ;;; Text mode settings
  (use-package text-mode
    :ensure nil
    :hook  (text-mode . visual-line-mode)
    :init  (delete-selection-mode t)
    :custom
    (sentence-end-double-space nil)
    (scroll-error-top-bottom t)
    (save-interprogram-paste-before-kill t))
#+end_src

** Markup Languages
*** Org-Mode
#+begin_src emacs-lisp
  (use-package org
    :pin melpa
    :custom
    (org-agenda-files '("~/configBackup/org/Inbox.org"))
    (org-directory "~/configBackup/org")
    (org-use-sub-superscripts "{}")
    :config
    (require 'org-tempo))

  ;; Org modern: Most features are disabled for beginning users
  (use-package org-modern
    :hook org-mode
    :custom
    (org-modern-table nil)
    (org-modern-keyword nil)
    (org-modern-timestamp nil)
    (org-modern-priority nil)
    ;;(org-modern-checkbox nil)
    (org-modern-tag t)
    (org-modern-block-name nil)
    (org-modern-keyword nil)
    (org-modern-footnote nil) ;; effect table align
    (org-modern-internal-target nil)
    (org-modern-radio-target nil)
    (org-modern-statistics nil)
    (org-modern-progress nil))

  ;; TOC CSS from Worg
  (use-package ox-html
    :after org
    :custom
    (org-html-doctype "html5")
    (org-html-html5-fancy t)
    (org-html-head-extra "<style>/* TOC inspired by http://jashkenas.github.com/coffee-script */ #table-of-contents { z-index: 1; margin-top: 105px; font-size: 10pt; font-family:sans-serif; position: fixed; right: 0em; top: 0em; background: white; line-height: 12pt; text-align: right; box-shadow: 0 0 1em #777777; -webkit-box-shadow: 0 0 1em #777777; -moz-box-shadow: 0 0 1em #777777; -webkit-border-bottom-left-radius: 5px; -moz-border-radius-bottomleft: 5px; /* ensure doesn't flow off the screen when expanded */ max-height: 80%; overflow: auto; } /* Hide when screen is too narrow */ @media only screen and (max-width: 67em) { #table-of-contents { display: none; } } #table-of-contents h2 { font-size: 13pt; max-width: 9em; border: 0; font-weight: normal; margin-top: 0.75em; padding-left: 0.5em; padding-right: 0.5em; padding-top: 0.05em; padding-bottom: 0.05em; } #table-of-contents #text-table-of-contents { display: none; text-align: left; } #table-of-contents:hover #text-table-of-contents { display: block; padding: 0.5em; margin-top: -1.5em; }</style>"))
#+end_src
*** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode (("README\\.md\\'" . gfm-mode)
  	 ("\\.md\\'" . markdown-mode)
  	 ("\\.markdown\\'" . markdown-mode)))
#+end_src
** Data Format
*** YAML
#+begin_src emacs-lisp
(use-package yaml-mode
  :mode
  (("\\.yaml\\'" . yaml-mode)
   ("\\.yml\\'" . yaml-mode)))
#+end_src
*** JSON
#+begin_src emacs-lisp
(use-package json-mode
  :defer t)
#+end_src

*** Beancount
#+begin_src emacs-lisp
  (use-package conda
    :custom
    (conda-anaconda-home "d:/Applications/Scoop/apps/miniconda3/current/"))

  (use-package beancount
    :after conda
    :custom
    (beancount-number-alignment-column 60)
    :hook
    (beancount-mode . (lambda ()
  		      (outline-minor-mode t)
  		      (conda-env-activate "bean") ; 激活conda环境
  		      (beancount-fava))))
#+end_src

** Version Control
#+begin_src emacs-lisp
    (use-package magit
      :defer t)
#+end_src
