#+PROPERTY: header-args:emacs-lisp :results silent :tangle "~/.emacs.d/init.el"
* early-init
#+begin_src  emacs-lisp :tangle "~/.emacs.d/early-init.el"
  ;;; early-init.el --- Early initialization. -*- lexical-binding: t -*-
  
  ;; Faster to disable these here (before they've been initialized)
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  (push '(fullscreen . maximized) default-frame-alist)
  
  ;; (setq-default mode-line-format nil)
  
  (provide 'early-init)
  
  ;;; early-init.el ends here
  
#+end_src
* Init.el

#+begin_src emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(initial-buffer-choice 'eshell)
 '(make-backup-files nil)
 '(package-selected-packages
   '(auto-dark treemacs-magit use-package dired-sidebar conda denote marginalia beancount treemacs markdown-mode org orderless magit which-key vertico)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "Sarasa Term Slab SC" :foundry "outline" :slant normal :weight regular :height 151 :width normal)))))

(server-mode t)

#+end_src

** localization
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)          ; pretty
  (setq selection-coding-system 'utf-8)  ; pretty
  (setq locale-coding-system 'utf-8)     ; please
  (setq file-name-coding-system 'chinese-gb18030)
  (set-clipboard-coding-system 'chinese-gb18030)
    
  (setq system-time-locale "C")
  (format-time-string "%Y-%m-%d")
  
#+end_src
** ui
#+begin_src emacs-lisp
  (column-number-mode t)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
  
  (keymap-global-set "<f10>" #'tmm-menubar)
  (advice-add #'tmm-add-prompt :after #'minibuffer-hide-completions)
  ;; Window management
  ;; Split windows sensibly
  
  (setq split-width-threshold 120
        split-height-threshold nil)
  
#+end_src
** use-package
#+begin_src emacs-lisp
  (use-package package
    :config
    (add-to-list 'package-archives
                 '("melpa" . "https://melpa.org/packages/"))
    (package-initialize))
  (use-package use-package
    :custom
    (use-package-always-ensure t)
    (warning-minimum-level :emergency))
#+end_src

*** minibuffer
vertico orderless marginalia which-key
#+begin_src emacs-lisp
(use-package vertico
  :hook (after-init . vertico-mode))
(use-package savehist
  :hook (vertico-mode . savehist-mode))
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))
(use-package marginalia
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  :hook (vertico-mode . marginalia-mode))
(use-package which-key
  :hook (after-init . which-key-mode))
#+end_src
*** treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (treemacs-resize-icons 24)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)
  
  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (treemacs-start-on-boot)
#+end_src
*** Org-Mode
#+begin_src emacs-lisp
(use-package org
  :pin melpa
  :custom
  (org-agenda-files '("~/../../configBackup/org"))
  (org-directory "~/../../configBackup/org")
  (org-use-sub-superscripts "{}"))
#+end_src
*** conda beancount
#+begin_src emacs-lisp
(use-package conda
  :custom
  (conda-anaconda-home "d:/Applications/Scoop/apps/miniconda3/current/"))
  
(use-package beancount
  :after conda
  :hook
  (beancount-mode . (lambda ()  
     (outline-minor-mode t)
     (conda-env-activate "bean") ; 激活conda环境
     (beancount-fava)  
     )))
*** themes
#+begin_src emacs-lisp
(use-package auto-dark
  :custom
  (auto-dark-themes '((modus-vivendi) (modus-oprendi)))
  :init (auto-dark-mode))
(define-key global-map (kbd "<f5>") #'modus-themes-toggle)

#+end_src
