#+PROPERTY: header-args:emacs-lisp :results silent :tangle "~/.emacs.d/init.el"

* early-init
#+begin_src  emacs-lisp :tangle "~/.emacs.d/early-init.el"
  ;;; early-init.el --- Early initialization. -*- lexical-binding: t -*-
  
  ;; Faster to disable these here (before they've been initialized)
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  (push '(fullscreen . maximized) default-frame-alist)
  
  ;; (setq-default mode-line-format nil)
  
  (provide 'early-init)
  
  ;;; early-init.el ends here
  
#+end_src
* Init.el
** Lexical Binding
In order to enable lexical binding in the config, this must be the first line of Emacs Lisp.
#+begin_src emacs-lisp
;;; init.el -*- lexical-binding: t -*-
#+end_src
** Custom
#+begin_src emacs-lisp
;; Custom settings in a separate file and load the custom settings

(setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))

(when (file-exists-p custom-file)
  (load custom-file))

(server-mode 1)

#+end_src
** Package Manager
#+begin_src emacs-lisp
  (use-package package
    :custom
    (package-archives
              '(("gnu" . "https://mirrors.ustc.edu.cn/elpa/gnu/")
                ("melpa" . "https://mirrors.ustc.edu.cn/elpa/melpa/")
                ("nongnu" . "https://mirrors.ustc.edu.cn/elpa/nongnu/")))
    (package-initialize))
  (use-package use-package
    :custom
    (use-package-always-ensure t)
    (warning-minimum-level :emergency))
#+end_src
** Localization
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)          ; pretty
  (setq selection-coding-system 'utf-8)  ; pretty
  (setq locale-coding-system 'utf-8)     ; please
  (setq file-name-coding-system 'chinese-gb18030)
  (set-clipboard-coding-system 'chinese-gb18030)
    
  (setq system-time-locale "C")
  (format-time-string "%Y-%m-%d")
  
#+end_src
** UI
#+begin_src emacs-lisp
  (column-number-mode t)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
  
  (keymap-global-set "<f10>" #'tmm-menubar)
  (advice-add #'tmm-add-prompt :after #'minibuffer-hide-completions)
  ;; Window management
  ;; Split windows sensibly
  
  (setq split-width-threshold 120
        split-height-threshold nil)
  
#+end_src
*** Themes
#+begin_src emacs-lisp
(use-package auto-dark
  :custom
  (auto-dark-themes '((modus-vivendi) (modus-oprendi)))
  :init (auto-dark-mode))
(define-key global-map (kbd "<f5>") #'modus-themes-toggle)
#+end_src
** UX
*** Completion & Prompt
vertico orderless marginalia which-key
#+begin_src emacs-lisp
(use-package vertico
  :hook (after-init . vertico-mode))
(use-package savehist
  :hook (vertico-mode . savehist-mode))
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))
(use-package marginalia
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  :hook (vertico-mode . marginalia-mode))
(use-package which-key
  :hook (after-init . which-key-mode))
#+end_src
*** File Manager
**** Dired
Hide all the information about files and folders except their names.
#+begin_src emacs-lisp
(use-package dired
  :hook
  (auto-revert-mode . dired-mode)
  :custom
  (dired-use-ls-dired nil)
  (dired-kill-when-opening-new-dired-buffer t)
  :config
  (add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode))))
#+end_src
**** Dired Subtree
[[https://github.com/Fuco1/dired-hacks#dired-subtree][Dired Subtree]] can list subdirectories with ~Tab~.
#+begin_src emacs-lisp
(use-package dired-subtree
  :after dired
  :bind
  (:map  dired-mode-map
   ("<tab>"     . dired-subtree-toggle)
   ("<backtab>" . dired-subtree-cycle)))
#+end_src
**** Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (treemacs-resize-icons 24)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)
  
  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

#+end_src
** Window Management
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    :custom
    (initial-buffer-choice '(lambda () (get-buffer-create dashboard-buffer-name))))

#+end_src
** Word Processing
#+begin_src emacs-lisp
    (use-package hl-line
      :hook (after-init . global-hl-line-mode)
      :config
      (setq hl-line-sticky-flag nil)
      ;; Highlight starts from EOL, to avoid conflicts with other overlays
      (setq hl-line-range-function (lambda () (cons (line-end-position)
                                               (line-beginning-position 2)))))
    (use-package markdown-mode)
    ;;; Text mode settings

  (use-package text-mode
    :ensure
    nil
    :hook
    (text-mode . visual-line-mode)
    :init
    (delete-selection-mode t)
    :custom
    (sentence-end-double-space nil)
    (scroll-error-top-bottom t)
    (save-interprogram-paste-before-kill t))
#+end_src
*** Org-Mode
#+begin_src emacs-lisp
    (use-package org
      :pin melpa
      :custom
      (org-agenda-files '("~/../../configBackup/org/Inbox.org"))
      (org-directory "~/../../configBackup/org")
      (org-use-sub-superscripts "{}"))
    (use-package org-tempo)
    ;; Org modern: Most features are disabled for beginning users

  (use-package org-modern
    :hook
    (org-mode . org-modern-mode)
    :custom
    (org-modern-table nil)
    (org-modern-keyword nil)
    (org-modern-timestamp nil)
    (org-modern-priority nil)
    (org-modern-checkbox nil)
    (org-modern-tag nil)
    (org-modern-block-name nil)
    (org-modern-keyword nil)
    (org-modern-footnote nil)
    (org-modern-internal-target nil)
    (org-modern-radio-target nil)
    (org-modern-statistics nil)
    (org-modern-progress nil))
#+end_src
** Beancount
#+begin_src emacs-lisp
(use-package conda
  :custom
  (conda-anaconda-home "d:/Applications/Scoop/apps/miniconda3/current/"))
  
(use-package beancount
  :after conda
  :hook
  (beancount-mode . (lambda ()  
     (outline-minor-mode t)
     (conda-env-activate "bean") ; 激活conda环境
     (beancount-fava)  
     )))
#+end_src
